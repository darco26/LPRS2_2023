#! /usr/bin/env python
# encoding: utf-8

'''
@author: Milos Subotic <milos.subotic.sm@gmail.com>
@license: MIT
'''

###############################################################################

import avrwaf
from avrwaf import build_context, after_cmd

import os
import glob

###############################################################################

one_file_apps = [
	'01_test_mcu.cpp',
	'02_test_pwm.cpp',
	'03_test_pwm_isr.cpp',
	'04_test_pwm_change.cpp',
	'05_test_adc.cpp',
	'06_flyback_async.cpp',
	'07_flyback.cpp',
	'08_test_spi.cpp'
]


def prerequisites(ctx):
	ctx.exec_command2('apt -y install gcc-avr avr-libc avrdude')
	#with open('/etc/udev/rules.d/50-avrdragon.rules', 'w') as f:
	#	f.write('SUBSYSTEM=="usb", ATTR{idVendor}=="03eb", ATTR{idProduct}=="2107", MODE="0660", GROUP="plugdev"')
	#ctx.exec_command('/etc/init.d/udev restart')

def options(opt):
	opt.load('c cxx')
	opt.add_option(
		'--mcu',
		dest = 'mcu',
		default = 'attiny13a',
		help = 'MCU (part) for avrdude'
	)
	opt.add_option(
		'--freq',
		dest = 'freq',
		default = 9.6e6,
		help = 'Working frequency MCU'
	)
	opt.add_option(
		'--programmer',
		dest = 'programmer',
		default = 'usbasp',
		help = 'Programmer/PROGRAMMER for avrdude: ' + \
			'[dragon_jtag|dragon_isp|usbasp]'
	)
	opt.add_option(
		'--app',
		dest = 'app',
		default = None,
		help = 'App to be uploaded to MCU'
	)
	
def configure(cfg):
	# Config.
	cfg.env.MCU = cfg.options.mcu
	cfg.env.FREQ = cfg.options.freq
	#cfg.env.AVR_PATH
	cfg.env.PROGRAMMER = cfg.options.programmer
	
	#cfg.env.HFUSE = 0x99 # Default.
	# LFUSE default = 0x6a
	# Changes:
	# CKDIV8=1 -> not dividing 9.6MHz with 8 i.e. global clk is 9.6MHz
	cfg.env.LFUSE = 0x7a # Default.
	
	# Tools.
	cfg.load('avr', tooldir = avrwaf.location)
	cfg.load('avrdude', tooldir = avrwaf.location)
	
	# Flags.
	mcu_flag = '-mmcu={}'.format(cfg.env.MCU)
	opt_flag = '-Os'
	f = [
		mcu_flag,
		'-DF_CPU={}UL'.format(int(cfg.env.FREQ)),
		opt_flag,
		'-g',
		'-Wall',
		#'-MMD',
		#'-ffunction-sections', '-fdata-sections',
		#'-fno-exceptions', '-fno-strict-aliasing'
	]
	cfg.env.CFLAGS += f
	cfg.env.CXXFLAGS += f
	cfg.env.LINKFLAGS += [mcu_flag, opt_flag, '-lm']
	cfg.env.append_value('CXXFLAGS', '-std=c++11')
	cfg.env.append_value('CPPFLAGS', '-I{}/FW'.format(os.environ['COMMON']))
	

def build(bld):
	for code_file in one_file_apps:
		name = os.path.splitext(code_file)[0]
		bld.program(
			target = name + '.elf',
			features = 'avr-hex',
			source = [code_file]
		)
		bld(
			rule = '"${OBJDUMP}" -S "${SRC}" > "${TGT[0]}"',
			target = name + '.asm',
			source = name + '.elf'
		)

def expand_app(app):
	sufixes = ['', '.exe', '.elf']
	prefixes = ['', 'app_', 'example_']
	
	programs = []
	for g in glob.glob('build/*'):
		if os.path.isfile(g):
			b= os.path.split(g)[1]
			root, ext = os.path.splitext(b)
			if ext in sufixes:
				programs.append(b)
	
	possible_a = []
	for p in programs:
		for prefix in prefixes:
			if p.startswith(prefix + app):
				#a = p
				a, _ = os.path.splitext(p) # Split elf for AVR
				possible_a.append(a)
	possible_a.sort()
	
	if len(possible_a) == 0 or app in possible_a:
		a = app
	else:
		a = possible_a[0]
		
	return a
	
@after_cmd(build)
@build_context
def size(ctx):
	'''Size of firmware choosed by --app=<NAME> or all'''
	if ctx.options.app:
		a = expand_app(ctx.options.app)
		ctx(
			features = 'avr_size',
			source = 'build/' + a + '.elf'
		)

@build_context
def reset(ctx):
	'''Reset MCU'''
	ctx(features = 'avrdude_read_fuses')
	
@build_context
def read_fuses(ctx):
	'''Read fuses from MCU'''
	ctx(features = 'avrdude_read_fuses')

@build_context
def write_fuses(ctx):
	'''Write configured fuses from MCU'''
	ctx(features = 'avrdude_write_fuses')

@after_cmd(build)
@build_context
def upload(ctx):
	'''Upload firmware <NAME>.hex to MCU choosed by --app=<NAME>'''
	if ctx.options.app:
		a = expand_app(ctx.options.app)
		ctx(
			features = 'avrdude_upload',
			source = a + '.hex'
		)

###############################################################################
